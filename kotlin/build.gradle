buildscript {
    ext.kotlin_version = "1.3.72"
    ext.coroutines_version = "1.3.3"
    ext.protobuf_version = "3.11.1"
    ext.grpc_version = "1.28.1" // CURRENT_GRPC_VERSION
    ext.grpc_kotlin_version = "0.1.2" // CURRENT_GRPC_KOTLIN_VERSION

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.11"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.72'
}

group = 'com.svacina'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'io.github.microutils:kotlin-logging:1.7.9'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
}

test {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}



apply plugin: "kotlin"
apply plugin: "com.google.protobuf"

// Generate IntelliJ IDEA's .idea & .iml project files.
// protobuf-gradle-plugin automatically registers *.proto and the gen output files
// to IntelliJ as sources.
// For best results, install the Protobuf and Kotlin plugins for IntelliJ.
apply plugin: "idea"
apply plugin: "application"

dependencies {
    // This repo
    implementation "io.grpc:grpc-kotlin-stub:$grpc_kotlin_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // Grpc and Protobuf
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.protobuf:protobuf-java-util:$protobuf_version"
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"

    // Java
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    // Google
    implementation "com.google.guava:guava:28.2-jre"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobuf_version" }
    plugins {
        // Specify protoc to generate using kotlin protobuf plugin
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpc_kotlin_version"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}

startScripts.enabled = false

task helloWorldClient(type: CreateStartScripts) {
    mainClassName = "com.svacina.hw.HwApplication"
    applicationName = "HwApplication"
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

applicationDistribution.into("bin") {
    from(helloWorldClient)
    fileMode = 0755
}